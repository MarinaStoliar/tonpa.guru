<html>
<head>
    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="" />
    <meta name="author" content="Maxim Sokhatsky" />
    <title>2022-11-01 Структура веб-фреймворків</title>
    <link rel="stylesheet" href="https://n2o.dev/blank.css" />
    <link rel="stylesheet" href="../../journal.css" />
</head>
<body>
<nav>
    <a href='../../index.html'>5HT</a>
    <a href='../index.html'>TOP</a>
    <a href='#'>2022-11-01</a>
</nav>
<main>
    <section>
        <h3>Структура веб-фреймворків</h3>

        <p>TL;DR Як написати свій перший сайт на веб фреймворку N2O</font></p>

        <p>Ця стаття показує загальну структуру усіх веб фреймворків і на прикладі фреймворку
           N2O показує як створювати активні сторінки та сайти на платформі Erlang/OTP та мові програмування Elixir.</P>

        <h3>Загальна структура веб-фреймворків</h3>

        <p>— Статичний та динамічний роутер<br>
           — Парсер URL параметрів<br>
           — Сесійний рівень (серверний та клієнтський контекти)<br>
           — Рівень контроллера (логіка веб сторінки)<br>
           — Презентаційний рівень (мова HTML елментів)<br>
           — Рівень представлення форм (для вводу та відображення)<br>
        </p>

        <h3>Створення сторіники користувачів у прикладі EXO</h3>

        <h4>1. Створення статичного HTML контейнеру</h4>

        <figure><code>
&lt;article>
    &lt;section>
	&lt;h2>КОРИСТУВАЧІ&lt;/h2>
        &lt;p>Додати користувачів в систему.&lt;/p>
        &lt;br>
        &lt;div id="ctrl">&lt;/div>
        &lt;div id="frms">&lt;/div>
        &lt;br>
    &lt;/section>
        &lt;div class="table">
	    &lt;div id="tableHead" class="trGroup"> &lt;/div>
            &lt;div id="tableRow"  class="trGroup"> &lt;/div>
        &lt;/div>
    &lt;br>
&lt;/article>
</code></figure>

        <h4>2. Створення контроллера сторінки</h4>

        <figure><code>
defmodule EXO.Domains do
  require EXO
  require BPE
  require NITRO

  def event(:init), do: []
  def event(:create), do: []
  def event({:"CreateClient", _}), do: []
  def event({:"Close",[]}), do: []
  def event(_), do: :ok
  def header(), do: []
end
</code></figure>

        <h4>3. Підключення контролера сторінки в роутер</h4>

        <figure><code>
defmodule EXO.Route do
  require N2O
  require Logger

  def finish(state, ctx), do: {:ok, state, ctx}
  def init(state, context) do
      %{path: path} = N2O.cx(context, :req)
      {:ok, state, N2O.cx(context, path: path, module: route_prefix(path))}
  end

  def route_prefix(<<"/ws/",p::binary>>) , do: route(p)
  def route_prefix(<<"/",   p::binary>>) , do: route(p)
  def route_prefix(p)                    , do: route(p)

  def route(<<"app/login",   _::binary>>), do: BPE.Login
  def route(<<"app/backoffice/domains", _::binary>>), do: EXO.Domains

  def route(""), do: BPE.Login
  def route(_) , do: BPE.Login

end
</code></figure>

        <h4>4. Створення бізнес-об'єктів та ініціалізація схеми</h4>

        <figure><code>-ifndef(CLIENT_HRL).
-define(CLIENT_HRL, "client_hrl").

-record(<font color=red>client</font>, {
        id = kvs:seq([],[]),
        next = [],prev = [],
        bank = [],
        iban = [],
        local = [],
        type = consumer,
        status = online,
        program = [],
        amount = [],
        default_account,
        accounts = "/exo/:bank/:id/accounts",
        default_card = [],
        cards = "/exo/:bank/:id/cards",
        phone = <<>>,
        tax = [],
        names = <<>>,
        surnames = <<>>,
        date = [],
        display_name = [],
        registration = [] }).

-endif.</code></figure>


        <figure><code>defmodule EXO do
  require KVS
  require FORM
  require Record

  @schema [ :account, <font color=red>:client</font>, :card,
            :transaction, :act, :currency, :phone, :otp, :field, :program ]

</code></figure>

        <h4>5. Створення форми вводу, налаштування postback та sources</h4>

        <figure><code>
> require EXO
> EXO.client()
</code></figure>

        <figure><code>
defmodule Client.Form do
  require EXO
  require NITRO
  require FORM
  require BPE
  def doc(), do: "Форма вводу користувача системи"
  def id, do: EXO.client()
  def new([], _, _), do: []
  def new(name, _client, _) do
      :erlang.put(:type_client_none, :consumer)
      FORM.document(
        name: :form.atom([:client,name]),
        sections: [
            FORM.sec(name: ["Створити користувача: " ])],
        buttons: [
            FORM.but(id: :decline,
                     name: :decline,
                     title: "Відміна",
                     class: [:cancel],
                     postback: {:"Close",[]} ),
            FORM.but(id: :proceed,
                     name: :proceed,
                     title: "Створити",
                     class: [:button,:sgreen],
                     sources: [:surnames_client_none,
                               :names_client_none,
                               :phone_client_none,
                               :type_client_none],
                     postback: {:"CreateClient", :form.atom([:client,name])})],
        fields: [
            FORM.field(id: :surnames,
                     name: :surnames,
                     type: :string,
                     title: "Прізвища:",
                     labelClass: :label),
            FORM.field(id: :names,
                     name: :names,
                     type: :string,
                     title: "Імена",
                     labelClass: :label),
            FORM.field(id: :phone,
                     name: :phone,
                     type: :string,
                     title: "Телефон",
                     labelClass: :label),
            FORM.field(
                     id: :type,
                     name: :type,
                     title: "Тип:",
                     type: :select,
                     default: :consumer,
                     options: [
                         FORM.opt(name: :consumer, checked: true, title: "Споживач"),
                         FORM.opt(name: :admin, title: "Адміністратор"),] ) ] )
     end
end
</code></figure>

        <h4>6. Створення табличної форми</h4>


        <figure><code>
defmodule Client.Row do
  require EXO
  require NITRO
  def doc(), do: "Форма-рядок для відображення користувача системи."
  def id(), do: EXO.client()
  def new(name, client, _) do
      phone = EXO.client(client, :phone)
      names = EXO.client(client, :names)
      surnames = EXO.client(client, :surnames)
      type = EXO.client(client, :type)
      status = EXO.client(client, :status)
      date = EXO.client(client, :date)

      NITRO.panel(id: :form.atom([:tr,name]), class: :td, body: [
        NITRO.panel(class: :column20,
            body: NITRO.link(href: "user.htm?p=" <> :nitro.to_binary(phone),
                             body: names <> " " <> surnames)),
        NITRO.panel(class: :column20,  body: :nitro.to_binary type),
        NITRO.panel(class: :column20,  body: :nitro.compact date),
        NITRO.panel(class: :column20,  body: :nitro.compact phone),
        NITRO.panel(class: :column10,  body: :nitro.to_binary status)
       ])
  end
end

</code></figure>

        <h4>7. Налаштування конфігурації</h4>

        <figure><code>
config :kvs,
  dba: :kvs_rocks,
  dba_st: :kvs_st,
  schema: [:kvs, :kvs_stream, :bpe_metainfo, EXO]

config :form,
  module: :form_backend,
  registry: [Client.Row,Client.Form]
</code></figure>

        <h4>8. Протокол init контролера сторінки</h4>

        <figure><code>
def event(:init) do
  :nitro.clear(:tableHead)
  :nitro.clear(:tableRow)
  :nitro.insert_top(:tableHead, header())
  :nitro.clear(:frms)
  :nitro.clear(:ctrl)
  mod = Client.Form
  :nitro.insert_bottom(:frms,
      :form.new(mod.new(mod,mod.id(), []), mod.id(), []))
  :nitro.insert_bottom(:ctrl,
      NITRO.link(id: :creator,
                 body: "Новий",
                 postback: :create,
                 class: [:button, :sgreen]))
  :nitro.hide(:frms)
    :lists.map(fn x -> :nitro.insert_top(:tableRow, 
        Client.Row.new(:form.atom([:row, EXO.client(x, :id)]), x, [])) end,
       :kvs.all('/exo/clients'))
end
</code></figure>

        <h4>9. Реакції на кнопки Створити та Закрити</h4>

        <figure><code>
def event({:"CreateClient", _}) do
  date = :calendar.now_to_datetime :erlang.timestamp
  type = :nitro.q(:type_client_none)
  names = :nitro.q(:names_client_none)
  phone = :nitro.q(:phone_client_none)
  surnames = :nitro.q(:surnames_client_none)
  id = :kvs.seq([],[])

  client = EXO.client(id: id, phone: phone, names: names,
                      surnames: surnames, status: :online,
                      type: type, date: date)

  nitro = :form.new(
     Client.Row.new(
        :form.atom([:row,id]), client, []), client, [])

  :kvs.append client, '/exo/clients'
  :nitro.insert_top(:tableRow, nitro)
  :nitro.hide(:frms)
  :nitro.show(:ctrl)
end
</code></figure>

        <h4>10. Direct повідомлення</h4>

        <figure><code>
> direct(tuple(atom('Close'),nil()))
</code></figure>

        <h4>11. Публікація додатку в пакетний менеджер hex</h4>

        <figure><code>
$ mix hex.publish
</code></figure>

    </section>
</main>
<footer>Namdak Tonpa <span class="heart">&nbsp;❤&nbsp;</span> 2009—2022</footer>
</body>
</html>
